* Emacs general
** Preconfig
#+begin_src emacs-lisp
(require 'package)
(setq package-archives '(
                         ("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa")
                         ("elpag" . "https://elpa.gnu.org/packages/")))

(package-initialize)

(unless package-archive-contents
  (package-refresh-contents))

;; setup for native compilation
(defvar native-comp-deferred-compilation-deny-list nil)
(setq native-comp-async-report-warnings-errors nil)

(package-install 'use-package)
(require 'use-package)

(setq use-package-always-ensure t)

(if (eq system-type 'darwin)
    (setq mac-option-key-is-meta nil
          mac-command-key-is-meta t
          mac-command-modifier 'meta
          mac-option-modifier 'none)
  )
(setq auto-window-vscroll nil)
;; (global-display-line-numbers-mode t)

;; Don't display welcom page
(setq inhibit-startup-message t)
(setq ring-bell-function 'ignore)
(menu-bar-mode 0)

(tool-bar-mode 0)

(setq backup-directory-alist '(("." . "~/.emacs_saves")))

;; auto complete when find file
(electric-pair-mode)

(when (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
;;(when (eq system-type 'darwin) (ns-auto-titlebar-mode))

(setq column-number-mode t)

(fset 'yes-or-no-p 'y-or-n-p)
(delete-selection-mode 1)
;; Show match parenthesis
(show-paren-mode 1)

;; Enable tab-bar-mode
(tab-bar-mode 1)
;;(global-set-key "\M-p" 'tab-previous)
(global-set-key "\M-n" 'tab-next)



;; Don't display welcom page
(setq inhibit-startup-message t)

;; Don't insert instructions in the *scratch* buffer
(setq initil-scratch-message nil)

;; Start at full-screen
;; (add-to-list 'default-frame-alist '(fullscreen . maximized))
(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
(add-to-list 'default-frame-alist '(ns-appearance . dark))

(setq ns-use-proxy-icon  nil)
(setq frame-title-format nil)
(set-face-attribute 'default nil
                    :family "Fira Code"
                    ;; :family "CommitMono"
                    ;; :family "JetBrainsMono"
                    :height 140
                    :weight 'normal
                    :width 'normal)
  (global-set-key (kbd "C-; C-z") 'toggle-maximize-buffer)

  (defun toggle-maximize-buffer () "Maximize buffer"
         (interactive)
         (if (= 1 (length (window-list)))
             (jump-to-register '_) 
           (progn
             (window-configuration-to-register '_)
             (delete-other-windows))))

(require 'misc)
(global-set-key (kbd "M-f") 'forward-to-word)
(global-set-key (kbd "M-e") 'forward-word)

(global-set-key (kbd "C-; C-z") 'toggle-maximize-buffer)

(defun toggle-maximize-buffer () "Maximize buffer"
       (interactive)
       (if (= 1 (length (window-list)))
           (jump-to-register '_) 
         (progn
           (window-configuration-to-register '_)
           (delete-other-windows))))

;;(global-set-key (kbd "C-; j")  'previous-buffer)
;;(global-set-key (kbd "C-; k")  'next-buffer)

;; (global-set-key "\M-N" "\C-u5\C-v")
;; (global-set-key "\M-P" "\C-u5\M-v")

;; Workaround for copy
(setq save-interprogram-paste-before-kill t)

;; copy files
(setq dired-dwim-target t)

;; use spaces over tabs
(setq-default indent-tabs-mode nil)

(defvar my-ediff-last-windows nil)

(defun my-store-pre-ediff-winconfig ()
  (setq my-ediff-last-windows (current-window-configuration)))

(defun my-restore-pre-ediff-winconfig ()
  (set-window-configuration my-ediff-last-windows))

(add-hook 'ediff-before-setup-hook #'my-store-pre-ediff-winconfig)
(add-hook 'ediff-quit-hook #'my-restore-pre-ediff-winconfig)

;; kill buffer after delete
(defun delete-file-visited-by-buffer (buffername)
  "Delete the file visited by the buffer named BUFFERNAME."
  (interactive "b")
  (let* ((buffer (get-buffer buffername))
         (filename (buffer-file-name buffer)))
    (when filename
      (delete-file filename)
      (kill-buffer-ask buffer))))



(add-hook 'org-mode-hook (lambda () (org-indent-mode t)))
(add-hook 'org-mode-hook #'toggle-truncate-lines)

(use-package exec-path-from-shell
   :init
   (when (memq window-system '(mac ns x))
     (exec-path-from-shell-initialize))
   )


(setq-default frame-title-format '(buffer-file-name "%f" "%b"))

;; fix indent in org src block
(setq org-src-preserve-indentation nil 
      org-edit-src-content-indentation 0)

(defun file-notify-rm-all-watches ()
  "Remove all existing file notification watches from Emacs."
  (interactive)
  (maphash
   (lambda (key _value)
     (file-notify-rm-watch key))
   file-notify-descriptors))



(setq custom-file "~/.emacs.d/custom.el")
(load custom-file 'noerror)


(require 'pulse)
(set-face-attribute 'pulse-highlight-start-face nil :background "#49505f")
(add-hook 'window-selection-change-functions
          (lambda (frame)
            (when (eq frame (selected-frame))
              (pulse-momentary-highlight-one-line))))

(setf window-combination-resize t)
(global-unset-key "\C-z")
;; (global-unset-key "\C-x\C-c")



;; Setup straight
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
(setq package-enable-at-startup nil)

(use-package good-scroll
  :init
  (good-scroll-mode 1)
  :bind (
         ("M-N" . good-scroll-up)
         ("M-P" . good-scroll-down)
         ))

;; smart M-x
(use-package smex)

(use-package zoom-window)
(global-set-key (kbd "C-x C-z") 'zoom-window-zoom)
(custom-set-variables
 '(zoom-window-mode-line-color "DarkGreen"))

;; hide warning window
(setq warning-minimum-level :emergency)

;; fix the issue when magit or compile window replace the current window
(customize-set-variable 'display-buffer-base-action
  '((display-buffer-reuse-window display-buffer-same-window)
    (reusable-frames . t)))

(customize-set-variable 'even-window-sizes nil)     ; avoid resizing
#+end_src

#+RESULTS:

** Theme
#+begin_src emacs-lisp
(use-package doom-themes)
  
(use-package timu-caribbean-theme)
;;(load-theme 'timu-caribbean t)
(load-theme 'leuven)

(use-package modus-theme)
(load-theme 'modus-operandi-tritanopia t)

(require 'dashboard)
(dashboard-setup-startup-hook)

(use-package all-the-icons)

(use-package doom-modeline
  :init (doom-modeline-mode 1))


(use-package rainbow-delimiters
  :hook (my-program-mode-hook . rainbom-delimiters-mode))

#+end_src

#+RESULTS:
| rainbom-delimiters-mode |

** Key binding
#+begin_src emacs-lisp
(global-unset-key (kbd "C-;"))
(global-set-key (kbd "C-; C-v") 'set-mark-command)
(global-set-key (kbd "C-; p")  'previous-buffer)
(global-set-key (kbd "C-; n")  'next-buffer)
(global-set-key (kbd "C-; ,")    'rename-buffer)
(global-set-key (kbd "C-; C-h") 'windmove-left)
(global-set-key (kbd "C-; C-j") 'windmove-down)
(global-set-key (kbd "C-; C-k") 'windmove-up)
(global-set-key (kbd "C-; C-l") 'windmove-right)
(global-set-key "\C-x\C-n" 'other-window)
(global-set-key "\C-x\C-p" 'other-window-backward)


(add-hook 'dired-mode-hook 'org-download-enable)
(electric-pair-mode)

(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))


#+end_src

#+RESULTS:
: t

* Utilities modes
** Copilot
#+begin_src emacs-lisp
(use-package copilot
  :straight (:host github :repo "zerolfx/copilot.el" :files ("dist" "*.el"))
  :config
  (add-hook 'prog-mode-hook 'copilot-mode)
  (add-hook 'yaml-mode-hook 'copilot-mode)
  (define-key copilot-completion-map (kbd "<tab>") 'copilot-accept-completion)
  (define-key copilot-completion-map (kbd "TAB") 'copilot-accept-completion))

#+end_src

#+RESULTS:
| copilot-mode |
** Agent tools
#+begin_src emacs-lisp
(use-package aidermacs
  ;;:vc (:url "https://github.com/MatthewZMD/aidermacs" :rev :newest)
  :straight (:host github :repo "MatthewZMD/aidermacs")
  :bind (("C-c a" . aidermacs-transient-menu))

  :config
  ; Enable minor mode for Aider files
  (aidermacs-setup-minor-mode)

  :custom
  ; See the Configuration section below
  (aidermacs-auto-commits t)
  (aidermacs-use-architect-mode t)

  ;; (aidermacs-default-model "github_copilot/claude-3.7-sonnet-thought")
  ;; (aidermacs-editor-model "github_copilot/claude-3.7-sonnet")

  (aidermacs-default-model "github_copilot/claude-3.7-sonnet")
  (aidermacs-editor-model "github_copilot/claude-3.5-sonnet")

  (aidermacs-weak-model "github_copilot/claude-3.5-haiku")
  (aidermacs-architect-model "github_copilot/claude-3.7-sonnet-thought")
)
#+end_src
  
** File navigate & text editing
#+begin_src emacs-lisp
(defun xah-search-current-word ()
  "Call `isearch' on current word or selection.
“word” here is A to Z, a to z, and hyphen [-] and lowline [_], independent of syntax table.

URL `http://xahlee.info/emacs/emacs/modernization_isearch.html'
Version: 2015-04-09"
  (interactive)
  (let (xp1 xp2)
    (if (region-active-p)
        (setq xp1 (region-beginning) xp2 (region-end))
      (save-excursion
        (skip-chars-backward "-_A-Za-z0-9")
        (setq xp1 (point))
        (right-char)
        (skip-chars-forward "-_A-Za-z0-9")
        (setq xp2 (point))))
    (setq mark-active nil)
    (when (< xp1 (point))
      (goto-char xp1))
    (isearch-mode t)
    (isearch-yank-string (buffer-substring-no-properties xp1 xp2))))

(global-set-key (kbd "C-*") 'xah-search-current-word)

(use-package fzf)

(use-package ace-window
  :config
  (global-set-key (kbd "M-o") 'ace-window)
  (global-set-key (kbd "C-x o") 'ace-window)
  :init
  (setq aw-dispatch-always nil)
  (setq aw-ignore-current t)
  (setq aw-keys '(?a ?b ?c ?d ?e ?f ?g ?h ?k))
)


(use-package drag-stuff
  :config
  (drag-stuff-global-mode 1)
  (drag-stuff-define-keys)
  (add-hook 'dired-mode-hook 'org-download-enable)
  )

(use-package ivy
  :diminish
  :bind
  (("M-s" . swiper-all-thing-at-point)
   ("M-x" . counsel-M-x)
   ("C-c M-o" . counsel-multi)
   :map ivy-minibuffer-map
   )
  :init
  ;; (bind-key "C-; l" 'counsel-projectile-switch-to-buffer)
  ;; (global-set-key (kbd "C-s") 'swiper-isearch)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "M-y") 'counsel-yank-pop)
  (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  (global-set-key (kbd "<f1> l") 'counsel-find-library)
  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  (global-set-key (kbd "<f2> j") 'counsel-set-variable)
  (global-set-key (kbd "C-; C-;") 'counsel-switch-buffer)
  (global-set-key (kbd "C-c v") 'ivy-push-view)
  (global-set-key (kbd "C-c V") 'ivy-pop-view)

  (global-set-key (kbd "C-c c") 'counsel-compile)
  (global-set-key (kbd "C-c g") 'counsel-git)
  (global-set-key (kbd "C-c j") 'counsel-git-grep)
  (global-set-key (kbd "C-c L") 'counsel-git-log)
  (global-set-key (kbd "C-c k") 'counsel-rg)
  (global-set-key (kbd "C-c m") 'counsel-linux-app)
  (global-set-key (kbd "C-c n") 'counsel-fzf)
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (global-set-key (kbd "C-c J") 'counsel-file-jump)
  (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
  (global-set-key (kbd "C-c w") 'counsel-wmctrl)
  (global-set-key (kbd "C-c b") 'counsel-bookmark)

  (setq ivy-re-builders-alist
        '((ivy-switch-buffer . ivy--regex-plus)
          (t . ivy--regex-fuzzy)))
  )

(use-package ivy-posframe)

(use-package counsel
  :bind
  ("C-."   . 'counsel-imenu)
  ("C-c '" . 'projectile-grep)
  ("C-c ," . 'counsel-imenu)
  ("C-h f" . 'counsel-describe-function)
  ("C-h v" . 'counsel-describe-variable)
  ;; ("C-o"   . 'counsel-outline)
  ("M-p" . 'counsel-switch-buffer)
  ;; show killring
  ;; (global-set-key (kbd "C-; y") 'counsel-yank-pop)
  )

(use-package ivy-rich
  :diminish
  :config
  (ivy-rich-mode t))

;; Projectile
(use-package projectile
  :init
  (setq projectile-require-project-root nil)
  :bind
  ("C-; c" . 'projectile-compile-project)
  )

(use-package counsel-projectile
  :bind
  (
   ("C-; C-f" . counsel-projectile-find-file)
   )
  )

(use-package treemacs
  :requires cfrs
  :bind
  (:map global-map
        ("C-t"       . treemacs)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-t"   . treemacs-select-window)
        ("C-x t d"   . treemacs-select-directory)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag))
  :config
  (setq treemacs-position 'left)
  (setq treemacs-default-visit-action 'treemacs-visit-node-close-treemacs)
)

;; (C-t) to toggle treemacs window
(global-set-key (kbd "C-t") 'treemacs)


  
(with-eval-after-load 'treemacs
  (defun treemacs-custom-filter (file _)
    (or (s-starts-with? "bazel-" file)
        (s-starts-with? "3rdparty" file)
        ))
  (push #'treemacs-custom-filter treemacs-ignored-file-predicates))


(use-package ag)


;; jump
(use-package popup)
(use-package dumb-jump
  :init
  (bind-key "C-; ]" 'dumb-jump-go)
  (bind-key "C-; t" 'dumb-jump-back))

;; Show search index
(use-package anzu)

(use-package bm
  :config
  (global-set-key (kbd "C-; m m") 'bm-toggle)
  (global-set-key (kbd "C-; m n")   'bm-next)
  (global-set-key (kbd "C-; m p") 'bm-previous))

(use-package goto-chg
  :bind
  (("C-o" . goto-last-change)
   ("C-i" . goto-last-change-reverse)))

(use-package avy
  :init
  (bind-key "C-; j" 'avy-goto-char))


(use-package multiple-cursors
  :ensure t
  :config
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this))


;; Expand selection
(use-package expand-region
  :config
  (global-set-key (kbd "C-'") 'er/expand-region))

(use-package dtrt-indent
  :ensure t
  :config
  (dtrt-indent-global-mode t)
  )


(use-package dired-subtree
  :config
  (bind-keys :map dired-mode-map
             ("i" . dired-subtree-insert)
             (";" . dired-subtree-remove)))


(use-package dired-git-info
  :bind (:map dired-mode-map
              (")" . dired-git-info-mode)))


(use-package multiple-cursors
  :ensure t
  :config)

;;(use-package wgrep-ag)

(use-package editorconfig
  :config
  (editorconfig-mode 1))

(use-package smartparens)

;; enable hs-minor-mode for all programming modes
(add-hook 'prog-mode-hook 'hs-minor-mode)
;; set C-c h as the keybinding for hs-toggle-hiding
(global-set-key (kbd "C-M-'") 'hs-toggle-hiding)
(global-set-key (kbd "C-c C-c") 'compile)


;; get the full path of the current file
(defun my/show-buffer-file-name ()
  "Show the full path to the current file in the minibuffer."
  (interactive)
  (let ((file-name (buffer-file-name)))
    (if file-name
        (progn
          (message file-name)
          (kill-new file-name))
      (error "Buffer not visiting a file"))))

;; get the relative path of the current file from the project root
(defun my/show-buffer-relative-file-name ()
  "Show the relative path to the current file from the project root in the minibuffer."
  (interactive)
  (let ((file-name (buffer-file-name)))
    (if file-name
        (progn
          (message (file-relative-name file-name (projectile-project-root)))
          (kill-new (file-relative-name file-name (projectile-project-root))))
      (error "Buffer not visiting a file"))))

;; get the relative path of the current file from the project root and copy to kill ring and print to minibuffer
(defun my/copy-buffer-relative-file-name ()
  "Show the relative path to the current file from the project root in the minibuffer."
  (interactive)
  (let ((file-name (buffer-file-name)))
    (if file-name
        (progn
          (message (file-relative-name file-name (projectile-project-root)))
          (kill-new (file-relative-name file-name (projectile-project-root))))
      (error "Buffer not visiting a file"))))

;; copy absolute path of the current file to kill ring and print to minibuffer
(defun my/copy-buffer-file-name ()
  "Show the full path to the current file in the minibuffer."
  (interactive)
  (let ((file-name (buffer-file-name)))
    (if file-name
        (progn
          (message file-name)
          (kill-new file-name))
      (error "Buffer not visiting a file"))))

;; bind the function to a key
(global-set-key (kbd "C-; f r") 'my/copy-buffer-relative-file-name)
(global-set-key (kbd "C-; f a") 'my/copy-buffer-file-name)
#+end_src

#+RESULTS:
: my/copy-buffer-file-name

** Org mode
#+begin_src emacs-lisp
(use-package org-bullets
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  )
#+end_src

#+RESULTS:
: t

** Yasnipeet
#+begin_src emacs-lisp
;; (use-package yasnippet
;;   :config
;;   (add-hook 'prog-mode-hook #'yas-minor-mode)
;; )

#+end_src
** Window management
#+begin_src emacs-lisp
(use-package golden-ratio
  :config
  (golden-ratio-mode 1)
  (add-to-list 'golden-ratio-extra-commands 'ace-window)
)
#+end_src

#+RESULTS:
: t

* Programming
** Dev tools
#+begin_src emacs-lisp
(use-package magit
  :config
  (setq magit-log-arguments '("-n256" "--graph" "--decorate" "--color")
        ;; Show diffs per word, looks nicer!
        magit-diff-refine-hunk t)

  :init
  (bind-key "C-x g" 'magit-status)
  (bind-key "C-; d" 'magit-diff-buffer-file))

(use-package company-box)

(use-package company
  :after lsp-mode
  :hook
  (my-program-mode-hook . company-mode)
  (company-mode . company-box-mode)
  :bind
  (:map lsp-mode-map ("<tab>" . company-indent-or-complete-common))
  (:map company-active-map ("<tab>" . company-complete-selection))
  (:map company-active-map ("C-n" . company-select-next))
  (:map company-active-map ("C-p" . company-select-previous))
  :custom
  (setq companyminimum-prefix-length 3)
 (setq company-auto-complete nil)
  (setq company-idle-delay 0)
  (setq tab-always-indent 'complete)
  :config
  (global-company-mode 1)
  (define-key company-active-map (kbd "C-n") #'company-select-next)
  (define-key company-active-map (kbd "C-p") #'company-select-previous))

;; add color for compile buffer
(add-hook 'compilation-filter-hook 'ansi-color-compilation-filter)
#+end_src

#+RESULTS:
| ansi-color-compilation-filter |

** Eglot
#+begin_src emacs-lisp
(use-package eglot
  :ensure t
  :defer t
  :hook (prog-mode . eglot-ensure))
#+end_src

#+RESULTS:
| eglot-ensure | doom-modeline-env-setup-python |

** Python
#+begin_src emacs-lisp
(use-package auto-virtualenv
  :config
  (setq auto-virtualenv-verbose t)
  (auto-virtualenv-setup))
#+end_src

#+RESULTS:
: t

** Javascript
#+begin_src emacs-lisp
(use-package js2-mode
  :mode "\\.js\\'"
  :config
  (setq js-indent-level 2))
(push 'my-error-1 compilation-error-regexp-alist)
(push '(my-error-1
        "^[ ]*at .* (\\([^:]+\\):\\([0-9]+\\):\\([0-9]+\\))" 1 2)
      compilation-error-regexp-alist-alist)
#+end_src

#+RESULTS:
| my-error-1                | ^[ ]*at .* (\([^:]+\):\([0-9]+\):\([0-9]+\)) | 1 | 2 |
| typescript-nglint-warning | WARNING:[[:blank:]]+\([^(                      |   |   |

