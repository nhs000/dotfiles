* Emacs general
** Preconfig
#+begin_src emacs-lisp
(require 'package)
(setq package-archives '(
                         ("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa")
                         ("elpag" . "https://elpa.gnu.org/packages/")))

(package-initialize)

(unless package-archive-contents
  (package-refresh-contents))

;; setup for native compilation
(defvar native-comp-deferred-compilation-deny-list nil)
(setq native-comp-async-report-warnings-errors nil)

(package-install 'use-package)
(require 'use-package)

(setq use-package-always-ensure t)

(if (eq system-type 'darwin)
    (setq mac-option-key-is-meta nil
          mac-command-key-is-meta t
          mac-command-modifier 'meta
          mac-option-modifier 'none)
  )
(setq auto-window-vscroll nil)
;; (global-display-line-numbers-mode t)

;; Don't display welcom page
(setq inhibit-startup-message t)
(setq ring-bell-function 'ignore)
(menu-bar-mode 0)

(tool-bar-mode 0)

(setq backup-directory-alist '(("." . "~/.emacs_saves")))

;; auto complete when find file
(electric-pair-mode)

(when (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(when (eq system-type 'darwin) (ns-auto-titlebar-mode))

(setq column-number-mode t)

(fset 'yes-or-no-p 'y-or-n-p)
(delete-selection-mode 1)
;; Show match parenthesis
(show-paren-mode 1)

;; Enable tab-bar-mode
(tab-bar-mode 1)

;; Don't display welcom page
(setq inhibit-startup-message t)

;; Don't insert instructions in the *scratch* buffer
(setq initil-scratch-message nil)

;; Start at full-screen
;; (add-to-list 'default-frame-alist '(fullscreen . maximized))
(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
(add-to-list 'default-frame-alist '(ns-appearance . dark))

(setq ns-use-proxy-icon  nil)
(setq frame-title-format nil)
(set-face-attribute 'default nil
                    :family "Fira Code"
                    ;; :family "CommitMono"
                    ;; :family "JetBrainsMono"
                    :height 140
                    :weight 'normal
                    :width 'normal)
  (global-set-key (kbd "C-; C-z") 'toggle-maximize-buffer)

  (defun toggle-maximize-buffer () "Maximize buffer"
         (interactive)
         (if (= 1 (length (window-list)))
             (jump-to-register '_) 
           (progn
             (window-configuration-to-register '_)
             (delete-other-windows))))

(require 'misc)
(global-set-key (kbd "M-f") 'forward-to-word)
(global-set-key (kbd "M-e") 'forward-word)

(global-set-key (kbd "C-; C-z") 'toggle-maximize-buffer)

(defun toggle-maximize-buffer () "Maximize buffer"
       (interactive)
       (if (= 1 (length (window-list)))
           (jump-to-register '_) 
         (progn
           (window-configuration-to-register '_)
           (delete-other-windows))))


(require 'package)
(setq package-archives '(
                         ("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa")
                         ("elpag" . "https://elpa.gnu.org/packages/")))


;;(global-set-key (kbd "C-; j")  'previous-buffer)
;;(global-set-key (kbd "C-; k")  'next-buffer)

;; (global-set-key "\M-N" "\C-u5\C-v")
;; (global-set-key "\M-P" "\C-u5\M-v")

;; Workaround for copy
(setq save-interprogram-paste-before-kill t)

;; copy files
(setq dired-dwim-target t)

;; use spaces over tabs
(setq-default indent-tabs-mode nil)

(defvar my-ediff-last-windows nil)

(defun my-store-pre-ediff-winconfig ()
  (setq my-ediff-last-windows (current-window-configuration)))

(defun my-restore-pre-ediff-winconfig ()
  (set-window-configuration my-ediff-last-windows))

(add-hook 'ediff-before-setup-hook #'my-store-pre-ediff-winconfig)
(add-hook 'ediff-quit-hook #'my-restore-pre-ediff-winconfig)

;; kill buffer after delete
(defun delete-file-visited-by-buffer (buffername)
  "Delete the file visited by the buffer named BUFFERNAME."
  (interactive "b")
  (let* ((buffer (get-buffer buffername))
         (filename (buffer-file-name buffer)))
    (when filename
      (delete-file filename)
      (kill-buffer-ask buffer))))



(add-hook 'org-mode-hook (lambda () (org-indent-mode t)))
(add-hook 'org-mode-hook #'toggle-truncate-lines)

(use-package exec-path-from-shell
  :init
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
  )


(setq-default frame-title-format '(buffer-file-name "%f" "%b"))

;; fix indent in org src block
(setq org-src-preserve-indentation nil 
      org-edit-src-content-indentation 0)

(defun file-notify-rm-all-watches ()
  "Remove all existing file notification watches from Emacs."
  (interactive)
  (maphash
   (lambda (key _value)
     (file-notify-rm-watch key))
   file-notify-descriptors))



(setq custom-file "~/.emacs.d/custom.el")
(load custom-file 'noerror)


(require 'pulse)
(set-face-attribute 'pulse-highlight-start-face nil :background "#49505f")
(add-hook 'window-selection-change-functions
          (lambda (frame)
            (when (eq frame (selected-frame))
              (pulse-momentary-highlight-one-line))))

(setf window-combination-resize t)
(global-unset-key "\C-z")
;; (global-unset-key "\C-x\C-c")



;; Setup straight
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
(setq package-enable-at-startup nil)

(use-package good-scroll
  :init
  (good-scroll-mode 1)
  :bind (
         ("M-N" . good-scroll-up)
         ("M-P" . good-scroll-down)
         ))

;; smart M-x
(use-package smex)

(use-package zoom-window)
(global-set-key (kbd "C-x C-z") 'zoom-window-zoom)
(custom-set-variables
 '(zoom-window-mode-line-color "DarkGreen"))
#+end_src
** Theme
#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t)
(use-package timu-caribbean-theme
  :ensure t)
;;(load-theme 'timu-caribbean t)
(load-theme 'leuven)

(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook)
  (setq dashboard-banner-logo-title "Have a nice day, Son!")
  (setq dashboard-items '((recents  . 5)
                          (projects . 5)
                          (bookmarks . 5)
                          (registers . 5)))
  )

(use-package all-the-icons
  :ensure t
  )

(use-package doom-modeline
  :init (doom-modeline-mode 1))


(use-package rainbow-delimiters
  :hook (my-program-mode-hook . rainbom-delimiters-mode))

#+end_src
** Key binding
#+begin_src emacs-lisp
(global-unset-key (kbd "C-;"))
(global-set-key (kbd "C-; C-v") 'set-mark-command)
(global-set-key (kbd "C-; p")  'previous-buffer)
(global-set-key (kbd "C-; n")  'next-buffer)
(global-set-key (kbd "C-; ,")    'rename-buffer)
(global-set-key (kbd "C-; C-h") 'windmove-left)
(global-set-key (kbd "C-; C-j") 'windmove-down)
(global-set-key (kbd "C-; C-k") 'windmove-up)
(global-set-key (kbd "C-; C-l") 'windmove-right)
(global-set-key "\M-p" 'previous-buffer)
(global-set-key "\M-n" 'next-buffer)
(global-set-key "\C-x\C-n" 'other-window)
(global-set-key "\C-x\C-p" 'other-window-backward)


(add-hook 'dired-mode-hook 'org-download-enable)
(electric-pair-mode)

(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))


#+end_src
* Utilities modes
** Copilot
#+begin_src emacs-lisp

(use-package copilot
  :straight (:host github :repo "zerolfx/copilot.el" :files ("dist" "*.el"))
  :ensure t)

(setenv "NODE_EXTRA_CA_CERTS" "/home/sonnguyen9/work/03.keys/HN.cer")
(setenv "LSP_USE_PLISTS" "true")

(add-hook 'prog-mode-hook 'copilot-mode)
(add-hook 'yaml-mode-hook 'copilot-mode)
(define-key copilot-completion-map (kbd "<tab>") 'copilot-accept-completion)
(define-key copilot-completion-map (kbd "TAB") 'copilot-accept-completion)

#+end_src
** File navigate & text editing
#+begin_src emacs-lisp
(use-package fzf
  :ensure t)

(use-package ace-window
  :ensure t
  :config
  (global-set-key (kbd "M-o") 'ace-window)
  (global-set-key (kbd "C-x o") 'ace-window)
  :init
  (setq aw-dispatch-always nil)
  (setq aw-ignore-current t)
  (setq aw-keys '(?a ?b ?c ?d ?e ?f ?g ?h ?k))
)


(use-package drag-stuff
  :config
  (drag-stuff-global-mode 1)
  (drag-stuff-define-keys)
  (add-hook 'dired-mode-hook 'org-download-enable)
  )

(use-package ivy
  :diminish
  :bind
  (("M-s" . swiper-all-thing-at-point)
   ("M-x" . counsel-M-x)
   ("C-c M-o" . counsel-multi)
   :map ivy-minibuffer-map
   )
  :init
  (ivy-mode 0)
  ;; (bind-key "C-; l" 'counsel-projectile-switch-to-buffer)
  ;; (global-set-key (kbd "C-s") 'swiper-isearch)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "M-y") 'counsel-yank-pop)
  (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  (global-set-key (kbd "<f1> l") 'counsel-find-library)
  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  (global-set-key (kbd "<f2> j") 'counsel-set-variable)
  (global-set-key (kbd "C-x b") 'counsel-switch-buffer)
  (global-set-key (kbd "C-c v") 'ivy-push-view)
  (global-set-key (kbd "C-c V") 'ivy-pop-view)

  (global-set-key (kbd "C-c c") 'counsel-compile)
  (global-set-key (kbd "C-c g") 'counsel-git)
  (global-set-key (kbd "C-c j") 'counsel-git-grep)
  (global-set-key (kbd "C-c L") 'counsel-git-log)
  (global-set-key (kbd "C-c k") 'counsel-rg)
  (global-set-key (kbd "C-c m") 'counsel-linux-app)
  (global-set-key (kbd "C-c n") 'counsel-fzf)
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (global-set-key (kbd "C-c J") 'counsel-file-jump)
  (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
  (global-set-key (kbd "C-c w") 'counsel-wmctrl)
  (global-set-key (kbd "C-c b") 'counsel-bookmark)

  (setq ivy-re-builders-alist
        '((ivy-switch-buffer . ivy--regex-plus)
          (t . ivy--regex-fuzzy)))
  )

(use-package ivy-posframe
  :init
  (ivy-posframe-mode 0))

(use-package counsel
  :bind
  ("C-."   . 'counsel-imenu)
  ("C-c '" . 'projectile-grep)
  ("C-c ," . 'counsel-imenu)
  ("C-h f" . 'counsel-describe-function)
  ("C-h v" . 'counsel-describe-variable)
  ;; ("C-o"   . 'counsel-outline)
  ("C-x b" . 'counsel-switch-buffer)
  ;; show killring
  ;; (global-set-key (kbd "C-; y") 'counsel-yank-pop)
  )

(use-package ivy-rich
  :diminish
  :config
  (ivy-rich-mode t))

;; Projectile
(use-package projectile
  :init
  (setq projectile-require-project-root nil)
  (projectile-mode t)
  )

(use-package counsel-projectile
  :bind
  (
   ("C-S-o" . lsp-workspace-folders-switch)
   ("C-; C-f" . counsel-projectile-find-file)
   )
  )

(use-package treemacs
  :bind
  (:map global-map
        ("M-<tab>"       . treemacs)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-t"   . treemacs-select-window)
        ("C-x t d"   . treemacs-select-directory)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag))
  :config
  (setq treemacs-position 'left)
  (setq treemacs-default-visit-action 'treemacs-visit-node-close-treemacs)
)
  
(with-eval-after-load 'treemacs
  (defun treemacs-custom-filter (file _)
    (or (s-starts-with? "bazel-" file)
        (s-starts-with? "3rdparty" file)
        ))
  (push #'treemacs-custom-filter treemacs-ignored-file-predicates))


(use-package ag)

;; jump
(use-package dumb-jump
  :init
  (bind-key "C-; ]" 'dumb-jump-go)
  (bind-key "C-; t" 'dumb-jump-back))

;; Show search index
(use-package anzu
  :init
  (global-anzu-mode +1))

(use-package bm
  :config
  (global-set-key (kbd "C-; m m") 'bm-toggle)
  (global-set-key (kbd "C-; m n")   'bm-next)
  (global-set-key (kbd "C-; m p") 'bm-previous))

(use-package goto-chg
  :bind
  (("C-o" . goto-last-change)
   ("C-i" . goto-last-change-reverse)))

(use-package avy
  :init
  (bind-key "C-; j" 'avy-goto-char))


(use-package multiple-cursors
  :config)
;; (global-set-key (kbd "C-S-<mouse-1>") 'mc/add-cursor-on-click))


;; Expand selection
(use-package expand-region
  :config
  (global-set-key (kbd "C-'") 'er/expand-region))

(use-package dtrt-indent
  :ensure t
  :config
  (dtrt-indent-global-mode t)
  )


(use-package dired-subtree
  :config
  (bind-keys :map dired-mode-map
             ("i" . dired-subtree-insert)
             (";" . dired-subtree-remove)))


(use-package dired-git-info
  :bind (:map dired-mode-map
              (")" . dired-git-info-mode)))


(use-package multiple-cursors
  :ensure t
  :config)
(use-package wgrep-ag)

(use-package editorconfig
  :config
  (editorconfig-mode 1))

(use-package smartparens)
#+end_src
** Org mode
#+begin_src emacs-lisp
(use-package org-bullets
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  )
(use-package org-download)
#+end_src
** Yasnipeet
#+begin_src emacs-lisp
(use-package yasnippet
  :config
  (add-hook 'prog-mode-hook #'yas-minor-mode)
)

#+end_src

* Programming
** Dev tools (git, flycheck...)
#+begin_src emacs-lisp
;; check syntax
(use-package flycheck
  :init (global-flycheck-mode 1))


;; Magit
(use-package magit
  :config
  (setq magit-log-arguments '("-n256" "--graph" "--decorate" "--color")
        ;; Show diffs per word, looks nicer!
        magit-diff-refine-hunk t)

  :init
  (bind-key "C-x g" 'magit-status)
  (bind-key "C-; d" 'magit-diff-buffer-file))

(use-package git-timemachine
  :ensure t
  )

(use-package company
  :after lsp-mode
  :hook (my-program-mode-hook . company-mode)
  :bind
  (:map lsp-mode-map ("<tab>" . company-indent-or-complete-common))
  (:map company-active-map ("<tab>" . company-complete-selection))
  (:map company-active-map ("C-n" . company-select-next))
  (:map company-active-map ("C-p" . company-select-previous))
  :custom
  (setq companyminimum-prefix-length 3)
  (setq company-auto-complete nil)
  (setq company-idle-delay 0)
  (setq tab-always-indent 'complete)
  :config
  (global-company-mode 1)
  (define-key company-active-map (kbd "C-n") #'company-select-next)
  (define-key company-active-map (kbd "C-p") #'company-select-previous))

(use-package company-box)

(use-package company
  :hook (company-mode . company-box-mode))

#+end_src
** Languages mode
*** Lsp mode

#+begin_src emacs-lisp
(defun efs/lsp-mode-setup ()
  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  (lsp-headerline-breadcrumb-mode))

(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :hook (
  ;(lsp-mode . efs/lsp-mode-setup)
  ((typescript-mode js2-mode web-mode php-mode) . lsp)
  (css-mode-hook . lsp-deferred)
  (html-mode-hook . lsp-deferred)
  (web-mode-hook . lsp-deferred)
  (js2-mode-hook . lsp-deferred)
  (c++-mode-hook . lsp-deferred)
  (c-mode-hook . lsp-deferred)
  (java-mode-hook . lsp-deferred)
  (lsp-mode-hook . lsp-enable-which-key-integration))
  :commands (lsp lsp-deferred)

  :init
  (setq lsp-keymap-prefix "C-c l")
  :config
  (lsp-enable-which-key-integration t)
  (setq gc-cons-threshold 200000000) ;; 200mb
  (setq read-process-output-max (* 3 1024 1024)) ;; 3mb
  (setq lsp-completion-provider :capf)
  (setq lsp-restart 'auto-restart)
  (setq lsp-ui-sideline-show-code-actions t)
  ;; only enable watcher for python, java files
   (setq lsp-enable-file-watchers nil)
   (setq lsp-file-watch-threshold 20000)

  :bind
  (:map lsp-mode-map
        ("TAB" . completion-at-point))
  )

(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :init
  (bind-key "C-; e l" 'lsp-ui-flycheck-list)
  :config
  (setq lsp-ui-sideline-diagnostics-max-lines 10))

(use-package lsp-ivy)

#+end_src
*** DAP mode
#+begin_src emacs-lisp
(use-package dap-mode
  :ensure t
  :defer t
  :after lsp-mode
  :config
  (dap-auto-configure-mode)
  :bind (:map dap-mode-map
	      ("C-c C-d" . dap-java-debug)
	      ("C-c R" . dap-java-run-test-class)
	      ("C-c d" . dap-java-debug-test-method)
	      ("C-c r" . dap-java-run-test-method)))

(add-hook 'dap-stopped-hook
          (lambda (arg) (call-interactively #'dap-hydra)))

#+end_src

*** Javascript
#+begin_src emacs-lisp
(use-package js-doc
  :ensure t
  :config
  (add-hook 'js2-mode-hook
            #'(lambda ()
                (define-key js2-mode-map "\C-ci" 'js-doc-insert-function-doc)
                (define-key js2-mode-map "@" 'js-doc-insert-tag)))
  )

(use-package js2-mode
  :ensure t
  :init
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode)))



(use-package typescript-mode
  :mode "\\.ts\\'"
  :hook
  (typescript-mode . lsp-deferred)
  :config
  (setq typescript-indent-level 2))

(use-package tide)
(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  ;; company is an optional dependency. You have to
  ;; install it separately via package-install
  ;; `M-x package-install [ret] company`
  (company-mode +1))

(add-hook 'typescript-mode-hook #'setup-tide-mode)



(use-package js2-mode
  :init
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode)))
#+end_src

*** Python
#+begin_src emacs-lisp
(use-package elpy
  :ensure t
  :init
  (exec-path-from-shell-initialize)
  (elpy-enable))

;; (use-package lsp-pyright
;;   :ensure t
;;   :hook
;;   (python-mode . (lambda ()
;;                    (require 'lsp-pyright)
;;                    (lsp-deferred))))
(use-package jedi)
(use-package eglot)

;; Python
(use-package pyvenv
  :ensure t
  :init
  (setenv "WORKON_HOME" "~/miniconda3/envs/")
  :config
  (pyvenv-mode 1)
  (setq pyvenv-post-activate-hooks
        (list (lambda ()
                (setq python-shell-interpreter (concat pyvenv-virtual-env "bin/python")))))
  (setq pyvenv-post-deactivate-hooks
        (list (lambda ()
                (setq python-shell-interpreter "python3"))))
  )

(use-package blacken
  :ensure t
  :delight
  :custom (blacken-line-length 79))

(use-package python-mode
  :hook
  (python-mode . pyvenv-mode)
  (python-mode . flycheck-mode)
  (python-mode . company-mode)
  (python-mode . blacken-mode)
  :config
  )

(use-package py-isort
  :ensure t
  :after python
  :hook ((python-mode . pyvenv-mode)
         (before-save . py-isort-before-save)))

#+end_src
*** PHP
#+begin_src emacs-lisp
(use-package php-mode)
#+end_src

*** Web mode
#+begin_src emacs-lisp
(use-package web-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.vue\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.jsx?$" . web-mode)) ;; auto-enable for .js/.jsx files
  (add-to-list 'auto-mode-alist '("\\.tsx$" . web-mode)) ;; auto-enable for .js/.jsx files
  ;;(setq web-mode-code-indent-offset 2)
  ;;(setq web-mode-attr-indent-offset 2)
  (setq web-mode-enable-auto-indentation nil)
  )

#+end_src

*** Kotline
#+begin_src emacs-lisp
(use-package kotlin-mode)
#+end_src

*** CPP
#+begin_src emacs-lisp
(add-hook 'c-mode-hook 'lsp)
(add-hook 'c++-mode-hook 'lsp)
(add-hook 'c-mode-hook #'lsp-deferred)
(add-hook 'c++-mode-hook #'lsp-deferred)
;; disable flycheck for c++
(add-hook 'c++-mode-hook (lambda () (flycheck-mode -1)))

;; add key binding to compile and run c++ code
;; switch to *compile-and-run* buffer to see the result
(defun compile-and-run ()
  "Compile and run current buffer file interactively."
  (interactive)
  (let ((file-name (file-name-nondirectory buffer-file-name)))
    (switch-to-buffer-other-window "*compile-and-run*")
    (erase-buffer)
    (async-shell-command (concat "g++ -std=c++11 -Wall -Wextra -Wshadow -Wnon-virtual-dtor -pedantic -o " (file-name-sans-extension file-name) " " file-name " && ./" (file-name-sans-extension file-name)) "*compile-and-run*")
    ))

;; set key binding for compile-and-run, only in c++-mode
(add-hook 'c++-mode-hook
          (lambda ()
            (local-set-key (kbd "C-c C-c") 'compile-and-run)))


#+end_src

*** Java
#+begin_src emacs-lisp
(use-package lsp-java
  :config
  (add-hook 'java-mode-hook 'lsp)
  (setq lsp-java-vmargs '("-noverify" "-Xmx1G" "-XX:+UseG1GC" "-XX:+UseStringDeduplication" "-javaagent:/home/sonnguyen9/.m2/repository/org/projectlombok/lombok/1.18.26/lombok-1.18.26.jar" "-Xbootclasspath/a:/home/sonnguyen9/.m2/repository/org/projectlombok/lombok/1.18.26/lombok-1.18.26.jar"))

)
#+end_src

*** Golang
#+begin_src emacs-lisp
(use-package go-mode)
(add-hook 'go-mode-hook
          (lambda ()
            (setq-default)
            (setq tab-width 2)
            (setq standard-indent 2)
            (setq indent-tabs-mode nil)))
#+end_src

